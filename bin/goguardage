#!/usr/bin/env ruby
# docopt for ruby sucks as of 2021-05-06
require 'listen'
require 'lolcat'
require 'optparse'

usage = <<"USAGE"
Usage: #{File.basename(__FILE__)} [-c command] [-i regex_ignore] [-w watchdir]
USAGE

dir_base = "#{ENV['HOME']}/gits/allred"
options = {}
options[:command] = "make -C #{dir_base} && make -C #{dir_base} run"
options[:watchdir] = ENV['PWD']
OptionParser.new do |opts|
  opts.banner = usage
  opts.on("-c", "--command COMMAND") do |o|
    options[:command] = o
  end
  opts.on("-h", "--help") do |o|
    puts(opts.banner)
    exit(false)
  end
  opts.on("-w", "--watchdir WATCHDIR") do |o|
    options[:watchdir] = o
  end
  opts.on("-i", "--ignore REGEX") do |o|
    options[:ignore] = o
  end
end.parse!

$opts_lolcat = {
  :freq => 0.1,
  :os => rand(256),
  :spread => 3.0,
}

def glog(str)
  Lol.println("#{File.basename(__FILE__)} #{str}\n", {}, $opts_lolcat)
end

Lol.println("#{`figlet '#{File.basename(__FILE__)}'`}", {}, $opts_lolcat)
glog(usage)
glog("watching: #{options[:watchdir]}")
glog("command: #{options[:command]}")
glog("ignoring: #{options[:ignore]}")
listener = Listen.to(options[:watchdir]) do |modified, added, removed|
  dbg = {t: Time.now, modified: modified, added: added, removed: removed}
  if options[:ignore] && (modified[0] =~ /^.*#{options[:ignore]}$/ || added[0] =~ /^.*#{options[:ignore]}$/ || removed[0] =~ /^.*#{options[:ignore]}$/)
    glog("IGNORING #{modified}")
    next
  end
  glog("#{dbg}")
  system(options[:command])
end
listener.start
sleep
