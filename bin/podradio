#!/usr/bin/perl
# purpose : command line podcast player
#           plays media files from a Google Reader public/shared feed
# howto:
# - create a label in Google Reader
# - make the label public
# - find your User ID in the resulting public URL
# - associate podcast feeds with the aforementioned label
# - pass the User ID and label to this script
# requirements:
# - should work on Linux
# - see @players for list of compatible players, add your own to the list
# TODO:
# - pass FF user agent string to mplayer (and vlc?) to bypass filtering
# - YAML output instead of Dumper?

my $usage = <<"USAGE";
$0 --label GoogleReaderPublicLabel --user GoogleReaderUserId
USAGE

use Data::Dumper;
use Getopt::Long;
use LWP::UserAgent;
use warnings;
use strict;
$Data::Dumper::Indent = 1;
$Data::Dumper::Terse = 1;

my @players = (
  'mplayer -audiofile-cache 60000',
  'vlc -Idummy',
  #'mocp',
  #'mp3blaster',
);

my %args;
GetOptions(\%args, qw(
  label=s
  player=s
  user=s
));
my $label = $args{label} || 'podtech';
my $user = $args{user} || '12483683802801775802';

my $url_get = "http://www.google.com/reader/public/atom/user%2F$user%2Flabel%2F$label";
print "playing: $url_get\n";
my $ua = LWP::UserAgent->new;

# find an installed player

my $player_found;
foreach my $player (@players) {
  my ($basename) = split '\s+', $player;
  if (`which $basename`) {
    print "found player: $player\n";
    $player_found = $player;
    last;
  }
}
unless ($player_found) {
  die "Unable to find player in " . Dumper \@players;
}

# iterate through audio file urls, de-dupe and play

my %files_played;
my $html = get();
while ($html =~ m{
  (                         # 1. URL
    http://\S+/(\S+?\.mp3)  # 2. file 
  )
}xmsgi) {
  my $file = $2;
  unless ($file) { die "oops!  couldn't extract file name from " . Dumper $1; }

  # get rid of extraneous html flotsam

  (my $match = $1) =~ s/href=*"*|".*//g;
  my $syntax_player = qq($player_found $match);
  unless ($files_played{$file}) {
    print localtime() . ' : running ' . Dumper $syntax_player;
    my $rc_player = system $syntax_player;
    $files_played{$file}++;
    if ($rc_player != 0) {
      die "non-zero exit by player";
    }
  }
}

# purpose  : get the URL and return the html string

sub get {
  my $response = $ua->get($url_get);
  return $response->as_string;
}
