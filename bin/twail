#!/usr/bin/perl
# purpose : like the unix "tail" command for Twitter
# TODO:
# - allow following arbitrary and multiple lists

my $usage = <<USAGE;

usage:
  $0 [--user u] [--color] [--debug] [--follow m] [--list l] [--timestamp] [--help]

where:
  --user      : is the Twitter user name
  --color     : ANSI color output
  --debug     : print some debugging output
  --follow    : refresh every m minutes, printing new tweets ala tail -f
  --list      : print statuses from a list you own
  --timestamp : print timestamp every update

examples:
  $0 --user scobleizer --follow 1 
  $0 -u questzero -f .5 -c -l toptwenty 
USAGE

use Data::Dumper;
use Date::Parse;
use Encode;
use FindBin;
use Getopt::Long;
use Net::Twitter;
use Storable;
use Term::ANSIColor;
use strict;
use warnings;

# handle args

my @options = qw(
  color
  debug
  follow=s
  help
  list=s
  user=s
);
my %args;
GetOptions(\%args, @options);
if ($args{help}) {
  print "$usage\n";
  exit 2;
}
my $user = $args{user} || $ENV{TWTUSER}; 
unless ($user) {
  print "No user specified!\n$usage\n";
  exit 2;
}

my $api_key = 'FJCpzTn5HvUthXtLmXTDEQ';
my $consumer_key = 'FJCpzTn5HvUthXtLmXTDEQ';
my $cs = ''
  . 'F9y8Nbb3zCjvEnZv0cop8'
  . 'jm3rvi'
  . '5JP$\uajyGkLC.'
;
$cs = 'J' . $cs;
$cs .= 'k';
$cs =~ s/\$\\|\./x/g;
my $path_state_save = '/tmp/' . $user . '.' . $FindBin::Script;
my $statuses;
my $high_water = 1;
my %name_colors;
my @colors_foreground_screen_names = qw(
  cyan
  green
  magenta
  red
  yellow
);

my $nt = Net::Twitter->new(
  traits => [qw(
    API::Lists
    API::REST
    OAuth
  )],
  consumer_key => $consumer_key,
  consumer_secret => $cs,
);

my $twitter_state;
eval {
  $twitter_state = retrieve $path_state_save;
};

# check for successful state retrieval, rebuild if needed

if (!$twitter_state || $@) {
  my $auth_url = $nt->get_authorization_url;
  print "you may need to authorize $FindBin::Script at " . $auth_url->as_string . "\n";
  print "enter pin: ";
  chomp(my $pin = <STDIN>);
  unless ($pin) {
    die "bad pin";
  }

  ($twitter_state->{access_token}, $twitter_state->{access_token_secret}) = $nt->request_access_token(
    verifier => $pin,
  );
  if ($twitter_state && $twitter_state->{access_token} && $twitter_state->{access_token_secret}) {
    store $twitter_state, $path_state_save;
  }
}

# authorize

unless ($nt->authorized) {
  $nt->access_token($twitter_state->{access_token});
  $nt->access_token_secret($twitter_state->{access_token_secret});
}

# for list mode, get the list id and verify the list actually exists

my @lists_found;
my $list_id;
if ($args{list}) {
  my $list_data;
  my $result = 'success';
  if ($args{debug}) {
    my $timestamp = localtime();
    print "$timestamp fetching lists for user $user ";
  }
  eval {
    $list_data = $nt->get_lists($user);
  };
  if ($@) {
    $result = 'failure';
    die $@;
  }
  if ($args{debug}) {
    print " $result\n";
  }
  if ($list_data) {
    foreach my $list (@{$list_data->{lists}}) {
      push @lists_found, $list->{name};
      if ($args{list} eq $list->{name}) {
        $list_id = $list->{id};
      }
    }
    unless ($list_id) {
      print "available lists are: " . join ', ', @lists_found;
      print "\n";
      exit 1;
    }
  }
}

# the big twail loop (if in follow mode)

while ( 1 ) {

  # list mode

  if ($args{list}) {
    my $result = 'failure';
    if ($args{debug}) {
      my $timestamp = localtime();
      print "$timestamp fetching list $user/$list_id ";
    }
    eval {
      $statuses = $nt->list_statuses({
        list_id => $list_id,
        user => $user,
        since_id => $high_water,
      });
    };
    unless ($@) {
      $result = 'success';
    }
    if ($args{debug}) {
      print " $result \n";
    }
  }

# default mode: follow the user's friends' timeline

  else {
    my $result = 'failure';
    if ($args{debug}) {
      my $timestamp = localtime();
      print "$timestamp fetching timeline > $high_water ";
    }
    eval {
      $statuses = $nt->friends_timeline({
        since_id => $high_water,
        count => 20,
      });
    };
    if ($@) {
      warn $@;
    }
    else {
      $result = 'success';
    }
    if ($args{debug}) {
      print " $result $@\n";
    }
  }
  print_statuses($statuses);

  # if in follow mode, sleep and stay in loop
  # otherwise, exit the loop

  if ($args{follow}) {
    unless ($args{follow} >= .5) { $args{follow} = .5; }
    sleep $args{follow} * 60;
  }
  else {
    last;
  }
}

# purpose : print out the array of statuses in a formatted log-like fashion
# args    : $statuses_arrayref

sub print_statuses {
  my $statuses = shift;
  unless ($statuses) {
    return;
  }

  # print timestamp/separator

  if (scalar @$statuses && $args{timestamp}) {
    my $timestamp = '[ ' . localtime() . ' ] ';
    my $length_timestamp = length $timestamp;
    if ($args{color}) {
      print color 'blue';
    }
    print ' ' x (80  - ($length_timestamp + 1)) . ' ' . $timestamp . "\n";
    if ($args{color}) {
      print color 'reset';
    }
  }
  for my $status ( reverse @$statuses ) {
    $high_water = $status->{id};
    my $etime;
    eval { $etime = str2time $status->{created_at}; };
    #my $mins_ago = sprintf('%0.1f', (time - $etime) / 60);
    my $mins_ago = (time - $etime) / 60;
    my $mins_ago_print = sprintf '%02.1f', "$mins_ago";
    if ($mins_ago_print < 10) {
      $mins_ago_print = "0" . $mins_ago_print;
    }
    my $name_print = $status->{user}{screen_name};
    my $length_screen_name = length $name_print;
    if ($args{color}) {
      $name_colors{$name_print} ||= color($colors_foreground_screen_names[int(rand $#colors_foreground_screen_names + 1)]);
      $name_print = $name_colors{$name_print} . $name_print . color('reset');
    }
    #my $screen_name = sprintf '%-14s', $name_print;
    my $screen_name = ' ' x (14 - $length_screen_name) . $name_print;
    print $screen_name;
    if ($args{color}) {
      print color('blue');
    }
    print " | ";
    if ($args{color}) {
      print color('reset');
    }
    print encode 'utf8',  $status->{text};
    print "\n";
  }
}

