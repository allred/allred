#!/usr/bin/ruby -w
# listens (airodump) for pcap files 
# which will then be decrypted with airdecap

$:.unshift File.join(File.dirname(__FILE__), '.')
require 'airutils'
require 'pp'

usage = <<usage
usage:
  #{$0} [ssid] [interface]
usage

# determine interface, command line overrides

iface_listen = nil
ifaces_wireless = AirUtils.list_ifaces_wireless
if (ARGV[1])
  iface_listen = ARGV[1]
elsif (ifaces_wireless.length == 1) 
  iface_listen = ifaces_wireless[0]
else
  puts usage
  puts "\navailable interfaces:"
  pp ifaces_wireless
  exit 2
end

if (!ARGV[0]) then
  puts usage
  puts "\navailable interfaces:"
  pp ifaces_wireless
  exit 2
end

essid = ARGV[0]
bssid, channel = AirUtils.parse_scan(essid)

# monitor mode on the proper channel
		
#syntax_airmon = "sudo airmon-ng start %s %s" % [$iface_crack, channel]  
syntax_airmon = "sudo airmon-ng stop %s" % [iface_listen]
puts "executing %s" % syntax_airmon
system(syntax_airmon)

# monitor
# TODO: check for multiple channels in scan file, don't set channel if so
		
syntax_airodump = "sudo airodump-ng --showack --output-format pcap --channel %s --bssid %s -w \"%s\" %s" % [channel, bssid, essid, iface_listen]
puts syntax_airodump
system(syntax_airodump)
